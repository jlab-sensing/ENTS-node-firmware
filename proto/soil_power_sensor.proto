/* @brief Implements serialization for measurements on the Soil Power Sensor
 *
 * Each individual measurement has all identifying information for someone to
 * determine when the measurement happened, who performed the measurement, what
 * was being measured, and the measurement itself. In the scheme of the Soil
 * Power Sensor, single measurements are taken, then saved to NVRAM for a later
 * upload. This was perferred over using "repeated" types as the data would have
 * to be uploaded in blocks of LoRaWAN due to payload size limitations.
 *
 * @author John Madden <jmadden173@pm.me>
 * @date 2023-11-21
 */

syntax = "proto3";

/* Data shared between all measurement messages */
message MeasurementMetadata {
  // id of the cell measured
  uint32 cell_id = 1;
  // id of the logging device
  uint32 logger_id = 2;
  // timestamp of the measurement
  uint32 ts = 3;
}

/* Power measurement message. Voltage and current can be digitially combined to
 * obtain power. */
message PowerMeasurement {
  // voltage
  double voltage = 2;
  // current
  double current = 3;
}

/* Teros12 measurement message */
message Teros12Measurement {
  // raw volumetric water content
  double vwc_raw = 2;
  // calibrated volumetric water content
  double vwc_adj = 3;
  // temperature in celcious
  double temp = 4;
  // electrical conductivity
  uint32 ec = 5;
}

message Teros21Measurement {
  // Matric potential of soil in kPa
  double matric_pot = 1;
  // temperature in celcius
  double temp = 2;
}

/* Phytos measurement */
message Phytos31Measurement {
  // raw adc voltage
  double voltage = 1;
  // calibrated leaf wetness
  double leaf_wetness = 2;
}

message BME280Measurement {
  // pressure
  uint32 pressure = 1;
  // temperature
  int32 temperature = 2;
  // humidity
  uint32 humidity = 3;
}

/* Capactive Soil Moisture Sensor */
message SEN0308Measurement {
  // voltage
  double voltage = 1;
  // humidity
  double humidity = 2;
}

/* Water Pressure Sensor */
message SEN0257Measurement {
  // voltage
  double voltage = 1;
  // pressure
  double pressure = 2;
}

/* Water Flow Sensor  */
message YFS210CMeasurement {
  // flow
  double flow = 1;
}

/* Top level measurement message */
message Measurement {
  // Metadata
  MeasurementMetadata meta = 1;

  // Possible measurements
  oneof measurement {
    PowerMeasurement power = 2;
    Teros12Measurement teros12 = 3;
    Phytos31Measurement phytos31 = 4;
    BME280Measurement bme280 = 5;
    Teros21Measurement teros21 = 6;
    SEN0308Measurement sen0308 = 7;
    SEN0257Measurement sen0257 = 8;
    YFS210CMeasurement yfs210c = 9;
  }
}

/* Acknowledge Packet */
message Response {
  /* Response codes from server */
  enum ResponseType {
    /* Data was successfully uploaded */
    SUCCESS = 0;
    /* General Error */
    ERROR = 1;
  }

  /* Response from server */
  ResponseType resp = 1;
}

message Esp32Command {
  oneof command {
    PageCommand page_command = 1;
    TestCommand test_command = 2;
    WiFiCommand wifi_command = 3;
    MicroSDCommand microsd_command = 4;
    IrrigationCommand irrigation_command = 5;
  }
}

message PageCommand {
  /* Type of request */
  enum RequestType {
    OPEN = 0;
    CLOSE = 1;
    READ = 2;
    WRITE = 3;
  }

  /* File request type */
  RequestType file_request = 1;
  /* Integer for file descriptor */
  uint32 file_descriptor = 2;
  /* Block size of read/write */
  uint32 block_size = 3;
  /* Number of bytes */
  uint32 num_bytes = 4;
}

message TestCommand {
  enum ChangeState {
    /* Data is received by the module */
    RECEIVE = 0;
    /* Data is received by the module indicating data for subsequent request */
    RECEIVE_REQUEST = 1;
    /* Data is sent my the module */
    REQUEST = 2;
  }

  /* State to put module into */
  ChangeState state = 1;
  /* Data field for test command data */
  int32 data = 2;
}

message WiFiCommand {
  enum Type {
    /* Connect to WiFi network*/
    CONNECT = 0;
    /* Post data to endpoint */
    POST = 1;
    /* Check HTTP code and response from POST */
    CHECK = 2;
    /* Timesync request */
    TIME = 3;
    /* Disconnect from WiFi network */
    DISCONNECT = 4;
    /* Get WiFi status */
    CHECK_WIFI = 5;
    /* Check connectivity to API */
    CHECK_API = 6;
    /* Force NTP sync */
    NTP_SYNC = 7;
  }

  /* Command type */
  Type type = 1;

  /* Group for Connect */
  /* WiFI SSID */
  string ssid = 2;
  /* WiFi Password */
  string passwd = 3;
  /* Endpoint url */
  string url = 4;
  /* Port */
  uint32 port = 8;

  /* Group for request repsonses */
  /* Return code */
  uint32 rc = 5;
  /* Timestamp n unix epochs */
  uint32 ts = 6;
  // binary data response
  bytes resp = 7;
}

message MicroSDCommand {
  enum Type {
    /* Decode and save data to a CSV file on the microSD card */
    SAVE = 0;
    /* Send UserConfig for CSV header creation */
    USERCONFIG = 1;
  }
  enum ReturnCode {
    SUCCESS = 0;
    ERROR_GENERAL = 1;
    ERROR_MICROSD_NOT_INSERTED = 2;
    ERROR_FILE_SYSTEM_NOT_MOUNTABLE = 3;
    ERROR_PAYLOAD_NOT_DECODED = 4;
    ERROR_FILE_NOT_OPENED = 5;
  }

  /* Command type */
  Type type = 1;
  /* Filename */
  string filename = 2;
  /* Return code */
  ReturnCode rc = 3;

  oneof data {
    /* measurement to be saved */
    Measurement meas = 4;
    /* userConfig to be saved */
    UserConfiguration uc = 5;
  }
}

message IrrigationCommand {
  enum Type {
    CHECK = 0;
  }

  enum State {
    // needs to be opened to prevent open defined twice
    OPEN = 0;
    CLOSE = 1;
  }

  Type type = 1;

  State state = 2;
}

message UserConfiguration {
  /********** Upload Settings **********/
  uint32 logger_id = 1;            // id of the logging device
  uint32 cell_id = 2;              // id of the cell measured
  Uploadmethod Upload_method = 3;  // indicates whether LoRa or WiFi is used
  uint32 Upload_interval = 4;      // upload time in seconds

  /********** Measurement Settings **********/
  repeated EnabledSensor enabled_sensors = 5;  // List of enabled sensors
  double Voltage_Slope = 6;                    // Calibration slope for voltage
  double Voltage_Offset = 7;                   // Calibration offset for voltage
  double Current_Slope = 8;                    // Calibration slope for current
  double Current_Offset = 9;                   // Calibration offset for current

  /********** WiFi Settings **********/
  string WiFi_SSID = 10;
  string WiFi_Password = 11;
  string API_Endpoint_URL = 12;
  uint32 API_Endpoint_Port = 13;
}

enum EnabledSensor {
  Voltage = 0;
  Current = 1;
  Teros12 = 2;
  Teros21 = 3;
  BME280 = 4;
}

enum Uploadmethod {
  LoRa = 0;
  WiFi = 1;
}
