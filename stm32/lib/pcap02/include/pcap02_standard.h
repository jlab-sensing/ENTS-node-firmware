#ifndef PCAP02_STANDARD_H
#define PCAP02_STANDARD_H

#include "pcap02.h"

// All addresses mentioned in this file are byte-addresses.

// Begin copying firmware to SRAM at the SRAM address PROGRAM_OFFSET.
#define PCAP02_STANDARD_FIRMWARE_PROGRAM_OFFSET 0
#define PCAP02_STANDARD_FIRMWARE_PROGRAM_LENGTH 1524

// The main program is offset by MAIN_OFFSET from PROGRAM_OFFSET.
#define PCAP02_STANDARD_FIRMWARE_MAIN_OFFSET 0
#define PCAP02_STANDARD_FIRMWARE_MAIN_LENGTH 364
// Likewise, the included headers are offset by INCLUDE_OFFSET from PROGRAM_OFFSET.
#define PCAP02_STANDARD_FIRMWARE_INCLUDE_OFFSET 512
#define PCAP02_STANDARD_FIRMWARE_INCLUDE_LENGTH 1011

// The firmware version data is not included in pcap02_standard_firmware[] and must be written separately (if desired).
// The firmware version is offset by VERSION_OFFSET from PROGRAM_OFFSET.
#define PCAP02_STANDARD_FIRMWARE_VERSION_OFFSET 4008 // Firmware version at offset +4008 (+0xFA8) {2 + FWT_Standard + FWG_Capacitance}
#define PCAP02_STANDARD_FIRMWARE_VERSION_LENGTH 3
#define PCAP02_STANDARD_FIRMWARE_VERSION_DATA0 0x02 // 02
#define PCAP02_STANDARD_FIRMWARE_VERSION_DATA1 0x01 // FWT_Standard
#define PCAP02_STANDARD_FIRMWARE_VERSION_DATA2 0x03 // FWG_Capacitance

// <PCap02_03_01_02_standard.hex>
// Truncated unused bytes and firmware version data.
// 95 rows * 16 bytes + 4 bytes = 1524 bytes
// Can be further truncated by splitting the main program from the included subroutines,
// which would reduce programming by 9 rows * 16 bytes + 5 bytes = 149 bytes, approximately 10%.
uint8_t pcap02_standard_firmware[] = {
    0x00, 0x00, 0x00, 0x7A, 0xC0, 0xCF, 0xFF, 0xF0, 0xD2, 0x43, 0x7A, 0xD0, 0x34, 0x72, 0x62, 0x63, // Start of main program.
    0x00, 0x65, 0x7A, 0xC4, 0xD1, 0x43, 0x7A, 0xD0, 0x33, 0xAB, 0x5E, 0x42, 0x5C, 0x48, 0xB0, 0x01,
    0x20, 0x68, 0xB1, 0x02, 0x78, 0x20, 0x60, 0xB2, 0x01, 0x20, 0x68, 0xB3, 0x1B, 0x7A, 0xC2, 0xD1,
    0x43, 0x7A, 0xDB, 0x33, 0xAB, 0x00, 0x7F, 0x7A, 0xD4, 0x43, 0x7A, 0xE4, 0x44, 0x7A, 0xC3, 0xD1,
    0x43, 0x7A, 0xDB, 0x33, 0xAB, 0x00, 0x78, 0x20, 0x60, 0xB5, 0x0B, 0x72, 0x62, 0x7F, 0x7A, 0xD4,
    0x43, 0x7A, 0xE4, 0x44, 0x20, 0x60, 0x00, 0xB7, 0x02, 0x78, 0x20, 0x60, 0x84, 0x01, 0x25, 0x80,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x1B, 0x7A, 0xC0, 0xD1, 0x43, 0x7A, 0xDB, 0x33, 0xAB,
    0x00, 0x7F, 0x23, 0x98, 0x84, 0x01, 0x25, 0x80, 0x20, 0x91, 0x43, 0x58, 0x7A, 0xC0, 0xD1, 0x43,
    0x6A, 0xC0, 0x44, 0x7A, 0xC4, 0xD1, 0x43, 0x7A, 0xD0, 0x3A, 0x66, 0x67, 0x76, 0x77, 0x66, 0x20,
    0x1B, 0x7A, 0xC0, 0xC0, 0xC0, 0xC8, 0xD2, 0x43, 0x7A, 0xDE, 0x44, 0x7A, 0xC0, 0xC0, 0xC1, 0xD1,
    0xD2, 0x43, 0x7A, 0xDD, 0x44, 0x7A, 0xC0, 0xC0, 0xC0, 0xC8, 0xD2, 0x41, 0x25, 0xD1, 0x6A, 0xD0,
    0x43, 0x7A, 0xD9, 0x44, 0x6A, 0xD1, 0x43, 0x7A, 0xDA, 0x44, 0x6A, 0xD2, 0x43, 0x7A, 0xDB, 0x44,
    0x20, 0xD8, 0x70, 0x60, 0x71, 0x61, 0x66, 0x67, 0x76, 0x77, 0x66, 0x7B, 0x7A, 0xC1, 0xD1, 0x43,
    0x7A, 0xDB, 0x33, 0xAB, 0x00, 0x78, 0x20, 0x60, 0x7A, 0xD5, 0x43, 0x7A, 0xC7, 0xD1, 0x41, 0x6A,
    0xEB, 0x45, 0x5A, 0x22, 0xF1, 0x46, 0x46, 0x46, 0x46, 0x7A, 0xDD, 0x44, 0x7A, 0xC0, 0xC0, 0xC0,
    0xC8, 0xD2, 0x43, 0x55, 0x7A, 0xDE, 0x45, 0x7A, 0xDD, 0x51, 0x7A, 0xD6, 0x41, 0x25, 0xB5, 0x6A,
    0xEA, 0x45, 0x7A, 0xD7, 0x41, 0x25, 0xB5, 0x6A, 0xE9, 0x45, 0x1C, 0x41, 0x43, 0x58, 0x6A, 0xEA,
    0x22, 0xAB, 0x6A, 0xE9, 0x50, 0x46, 0x6A, 0xEB, 0x44, 0xA9, 0x03, 0x6A, 0xEB, 0x59, 0x43, 0x7A,
    0xD0, 0xD1, 0x41, 0x5C, 0xA8, 0x05, 0x6A, 0xC0, 0x5A, 0x6A, 0xEB, 0x45, 0x6A, 0xEB, 0x41, 0x7A,
    0xE2, 0x45, 0x7A, 0xD8, 0x41, 0x25, 0xB5, 0x6A, 0xEA, 0x45, 0x7A, 0xD9, 0x41, 0x25, 0xB5, 0x6A,
    0xE9, 0x45, 0x1D, 0x41, 0x43, 0x58, 0x6A, 0xEA, 0x22, 0xAB, 0x6A, 0xE9, 0x50, 0x46, 0x6A, 0xEB,
    0x44, 0xA9, 0x03, 0x6A, 0xEB, 0x59, 0x43, 0x7A, 0xD0, 0xD1, 0x41, 0x5C, 0xA8, 0x05, 0x6A, 0xC0,
    0x5A, 0x6A, 0xEB, 0x45, 0x6A, 0xEB, 0x41, 0x7A, 0xE3, 0x45, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // End of main program. Last byte at offset +364 (+0x16C).
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, // Included headers/subroutines at offset +512 (+0x200).
    0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
    0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
    0x02, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F,
    0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F,
    0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F,
    0x4F, 0x02, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E,
    0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E,
    0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E,
    0x4E, 0x4E, 0x02, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56,
    0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56,
    0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56,
    0x56, 0x56, 0x56, 0x02, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E,
    0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E,
    0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x5E,
    0x5E, 0x5E, 0x5E, 0x5E, 0x5E, 0x02, 0x6A, 0xF5, 0x44, 0x42, 0x7A, 0xC6, 0xD1, 0x41, 0x6A, 0xF3,
    0x45, 0x40, 0x5D, 0x22, 0xF1, 0x46, 0x46, 0x46, 0x46, 0x6A, 0xF4, 0x44, 0x59, 0x59, 0x6A, 0xF3,
    0x45, 0x5B, 0x5B, 0xAB, 0x10, 0x6A, 0xF5, 0x43, 0x40, 0x5D, 0x6A, 0xF2, 0x22, 0xED, 0x6A, 0xF3,
    0x13, 0xAA, 0xF6, 0x13, 0xAA, 0x04, 0x6A, 0xF5, 0x43, 0x40, 0x5D, 0x6A, 0xF4, 0x57, 0x57, 0xAB,
    0x07, 0x6A, 0xF2, 0x5E, 0x6A, 0xF4, 0x13, 0xAA, 0xF7, 0x02, 0x6A, 0xF5, 0x45, 0x7A, 0xC6, 0xD1,
    0x41, 0x6A, 0xF3, 0x45, 0x40, 0x5D, 0x22, 0xF1, 0x46, 0x46, 0x46, 0x46, 0x6A, 0xF4, 0x44, 0x59,
    0x59, 0x6A, 0xF3, 0x45, 0x5B, 0x5B, 0xAB, 0x10, 0x6A, 0xF5, 0x41, 0x43, 0x58, 0x6A, 0xF2, 0x22,
    0xBB, 0x6A, 0xF3, 0x13, 0xAA, 0xF6, 0x13, 0xAA, 0x04, 0x6A, 0xF5, 0x41, 0x43, 0x58, 0x6A, 0xF4,
    0x57, 0x57, 0xAB, 0x07, 0x6A, 0xF2, 0x56, 0x6A, 0xF4, 0x13, 0xAA, 0xF7, 0x02, 0x6A, 0xF5, 0x45,
    0xAB, 0x13, 0x7A, 0xC7, 0xD1, 0x5A, 0xAC, 0x08, 0x52, 0x4B, 0x12, 0x4E, 0x12, 0xA8, 0xFB, 0xA9,
    0x05, 0x5A, 0x46, 0x12, 0xA8, 0xFB, 0x00, 0x02, 0x7A, 0xF6, 0x43, 0x40, 0x4F, 0x4F, 0x4F, 0x6A,
    0xF6, 0x45, 0x7A, 0xDA, 0x41, 0x43, 0x58, 0x6A, 0xF6, 0x22, 0xAB, 0x6A, 0xF5, 0x44, 0x7A, 0xC0,
    0xC0, 0xC1, 0xE6, 0xD2, 0x43, 0x7A, 0xDD, 0x44, 0x7A, 0xC0, 0xC0, 0xC0, 0xC8, 0xD2, 0x41, 0x7A,
    0xDE, 0x45, 0x7A, 0xC0, 0xC0, 0xC1, 0xED, 0xD2, 0x43, 0x6A, 0xF4, 0x44, 0x1C, 0x43, 0xAB, 0x02,
    0x6A, 0xF5, 0x58, 0x8C, 0x04, 0x7A, 0xDD, 0x13, 0x1C, 0x50, 0x1D, 0x44, 0x7A, 0xDD, 0x13, 0x7A,
    0xDE, 0x13, 0x6A, 0xF4, 0x43, 0x7A, 0xDD, 0x58, 0xAC, 0xE1, 0x8C, 0x17, 0x7A, 0xEF, 0x43, 0x6A,
    0xC8, 0x59, 0x7A, 0xF0, 0x43, 0x6A, 0xC9, 0x59, 0x7A, 0xF3, 0x43, 0x6A, 0xCA, 0x59, 0x7A, 0xF4,
    0x43, 0x6A, 0xCB, 0x59, 0x00, 0x6A, 0xC9, 0x7A, 0xC0, 0xC0, 0xC0, 0xC9, 0xD2, 0x43, 0x7A, 0xDD,
    0x44, 0x6A, 0xF2, 0x44, 0x6A, 0xF3, 0x44, 0x7A, 0xC0, 0xC0, 0xC0, 0xC8, 0xD2, 0x43, 0x7A, 0xDE,
    0x44, 0x1D, 0x43, 0x4E, 0x4E, 0x4E, 0x44, 0x7A, 0xC0, 0xC0, 0xC0, 0xCF, 0xD2, 0x43, 0x6A, 0xF4,
    0x44, 0x8C, 0x09, 0x7A, 0xC0, 0xC0, 0xC0, 0xCB, 0xD2, 0x43, 0x6A, 0xF4, 0x44, 0x00, 0x40, 0x5D,
    0x1C, 0x43, 0x1D, 0x22, 0xDC, 0x6A, 0xF3, 0x43, 0x7A, 0xDD, 0x44, 0x1C, 0x45, 0x8D, 0x0C, 0x7A,
    0xDE, 0x13, 0x13, 0x1D, 0x43, 0x4E, 0x4E, 0x4E, 0x44, 0x6A, 0xF2, 0x13, 0x6A, 0xF3, 0x13, 0x6A,
    0xF2, 0x13, 0x41, 0x7A, 0xDD, 0x45, 0x6A, 0xF4, 0x43, 0x5C, 0xAC, 0xD0, 0x7A, 0xC0, 0xC0, 0xC0,
    0xCF, 0xD2, 0x43, 0x6A, 0xF4, 0x44, 0x6A, 0xF3, 0x41, 0x6A, 0xF4, 0x43, 0x5C, 0xA8, 0x0C, 0x6A,
    0xF3, 0x43, 0x13, 0x7A, 0xDD, 0x44, 0x1C, 0x44, 0x59, 0x43, 0xAB, 0xE9, 0x6A, 0xC8, 0x43, 0x46,
    0x46, 0x46, 0x44, 0x8A, 0x14, 0x40, 0x5D, 0x4B, 0x7A, 0xC8, 0xD1, 0x43, 0x7A, 0xF9, 0x33, 0xAB,
    0x1C, 0x6A, 0xC8, 0x45, 0x6A, 0xC9, 0x45, 0x8D, 0x01, 0x00, 0x02, 0x6A, 0xCA, 0x45, 0x6A, 0xCB,
    0x45, 0x6A, 0xCC, 0x45, 0x6A, 0xCD, 0x45, 0x6A, 0xCE, 0x45, 0x6A, 0xCF, 0x45, 0x02, 0x7A, 0xC2,
    0xD1, 0x43, 0x6A, 0xF5, 0x44, 0x6A, 0xF4, 0x44, 0x8C, 0x09, 0x7A, 0xC1, 0xD1, 0x43, 0x6A, 0xF5,
    0x44, 0x6A, 0xF4, 0x44, 0x8D, 0x1A, 0x7A, 0xC1, 0xD1, 0x43, 0x6A, 0xF5, 0x44, 0x4E, 0x50, 0x6A,
    0xF4, 0x44, 0x8C, 0x0C, 0x7A, 0xC0, 0xD1, 0x43, 0x6A, 0xF5, 0x44, 0x4E, 0x4E, 0x50, 0x6A, 0xF4,
    0x44, 0x7A, 0xC0, 0xC0, 0xC0, 0xC8, 0xD2, 0x43, 0x4E, 0x4E, 0x6A, 0xF4, 0x51, 0x7A, 0xC9, 0xD1,
    0x43, 0x7A, 0xF9, 0x33, 0xAB, 0x01, 0x25, 0x75, 0x6A, 0xF5, 0x43, 0x6A, 0xF4, 0x51, 0x7A, 0xCA,
    0xD1, 0x43, 0x7A, 0xF9, 0x33, 0xAB, 0x01, 0x25, 0x75, 0x6A, 0xF5, 0x43, 0x6A, 0xF4, 0x51, 0x7A,
    0xCB, 0xD1, 0x43, 0x7A, 0xF9, 0x33, 0xAB, 0x01, 0x25, 0x75, 0x6A, 0xF5, 0x43, 0x6A, 0xF4, 0x51,
    0x7A, 0xCC, 0xD1, 0x43, 0x7A, 0xF9, 0x33, 0xAB, 0x01, 0x25, 0x75, 0x6A, 0xF5, 0x43, 0x6A, 0xF4,
    0x51, 0x7A, 0xCD, 0xD1, 0x43, 0x7A, 0xF9, 0x33, 0xAB, 0x01, 0x25, 0x75, 0x6A, 0xF5, 0x43, 0x6A,
    0xF4, 0x51, 0x7A, 0xCE, 0xD1, 0x43, 0x7A, 0xF9, 0x33, 0xAB, 0x01, 0x25, 0x75, 0x6A, 0xF5, 0x43,
    0x6A, 0xF4, 0x51, 0x7A, 0xCF, 0xD1, 0x43, 0x7A, 0xF9, 0x33, 0xAB, 0x01, 0x25, 0x75, 0x6A, 0xF5,
    0x43, 0x6A, 0xF4, 0x51, 0x02, 0x6A, 0xF4, 0x43, 0x46, 0x46, 0x7A, 0xDD, 0x44, 0x1C, 0x45, 0x02,
    0x7A, 0xE2, 0x41, 0x4F, 0x4F, 0x4F, 0x6A, 0xF2, 0x45, 0x5A, 0x7A, 0xE3, 0x43, 0x6A, 0xF2, 0x25,
    0xB2, 0x6A, 0xD0, 0x45, 0x5A, 0x7A, 0xE4, 0x43, 0x6A, 0xF2, 0x25, 0xB2, 0x6A, 0xD1, 0x45, 0x5A,
    0x7A, 0xE5, 0x43, 0x6A, 0xF2, 0x25, 0xB2, 0x6A, 0xD2, 0x45, 0x7A, 0xC8, 0xD1, 0x43, 0x7A, 0xD0,
    0x3A, 0x02, 0x22, 0xDC, 0x02, 0x7A, 0xD7, 0xD1, 0x43, 0x6A, 0xF2, 0x45, 0x5D, 0xAD, 0x01, 0x5D,
    0x45, 0x41, 0x02, 0x7A, 0xCF, 0xD1, 0x43, 0x6A, 0xF2, 0x45, 0x5D, 0xAD, 0x01, 0x5D, 0x45, 0x41,
    0x02, 0x4B, 0x12, 0x1D, 0x43, 0x1C, 0x44, 0x7A, 0xDD, 0x13, 0x7A, 0xDE, 0x13, 0x12, 0xAA, 0xF2,
    0x02, 0x7A, 0xC0, 0xC0, 0xC0, 0xD0, 0xD2, 0x43, 0x58, 0x58, 0x6A, 0xF2, 0x44, 0x42, 0x46, 0x3C,
    0x13, 0xAA, 0xFA, 0x02 // firmware end, last byte at +1524 (+0x5F4)
};

uint8_t pcap02_standard_firmware_version[] = {
    PCAP02_STANDARD_FIRMWARE_VERSION_DATA0,
    PCAP02_STANDARD_FIRMWARE_VERSION_DATA1,
    PCAP02_STANDARD_FIRMWARE_VERSION_DATA2};

// Note: Register 77 (RUNBIT) is included here.
uint8_t pcap02_standard_config_registers[] = {
    0x0F, 0x00, 0x01, // Register  0,  1,  2
    0x94, 0x80, 0x05, // Register  3,  4,  5
    0x01, 0x04, 0xA8, // Register  6,  7,  8
    0x00, 0x10, 0x00, // Register  9, 10, 11
    0x0F, 0x01, 0x00, // Register 12, 13, 14
    0x00, 0x00, 0xD0, // Register 15, 16, 17
    0x07, 0x00, 0x00, // Register 18, 19, 20
    0x00, 0x00, 0x02, // Register 21, 22, 23
    0x08, 0x01, 0x00, // Register 24, 25, 26
    0x02, 0x40, 0x05, // Register 27, 28, 29
    0x01, 0x00, 0x00, // Register 30, 31, 32
    0x00, 0x43, 0x05, // Register 33, 34, 35
    0x00, 0x00, 0x50, // Register 36, 37, 38
    0x00, 0x00, 0x00, // Register 39, 40, 41
    0x00, 0x44, 0x00, // Register 42, 43, 44
    0x00, 0xFF, 0x00, // Register 45, 46, 47
    0x27, 0x30, 0x00, // Register 48, 49, 50
    0x00, 0x00, 0x00, // Register 51, 52, 53
    0x00, 0x00, 0x00, // Register 54, 55, 56
    0x00, 0x00, 0x00, // Register 57, 58, 59
    0x00, 0x00, 0x00, // Register 60, 61, 62
    0x00, 0x00, 0x00, // Register 63, 64, 65
    0x00, 0x00, 0x00, // Register 66, 67, 68
    0x00, 0x00, 0x00, // Register 69, 70, 71
    0x00, 0x28, 0x01, // Register 72, 73, 74
    0x00, 0x00, 0x01  // Register 75, 76, 77
};

// The standard firmware's result registers store the output as 3.21 unsigned fixed point numbers.
// Note: RES0 is a regular integer for debugging. See Section 5.5.1 "Result Registers" of the datasheet.
#define PCAP02_STANDARD_FIRMWARE_RESULT_FIXED_BITS 3
#define PCAP02_STANDARD_FIRMWARE_RESULT_FRACTIONAL_BITS 21

// typedef __attribute__((__packed__)) union
typedef union
{
  uint8_t byte[3];
  uint32_t word : 24;
  struct
  {
    uint32_t fractional : PCAP02_STANDARD_FIRMWARE_RESULT_FRACTIONAL_BITS;
    uint32_t fixed : PCAP02_STANDARD_FIRMWARE_RESULT_FIXED_BITS;
  };
} pcap02_result_t;

#endif